# ========================================== CONAN configuration file v3.3.0 ======================================== 
#      *********** KEYS *****************************************************************************************
#      PRIORS: *Fix-F(val), *Norm-N(mu,std), *Uni-U(min,start,max), *TruncNorm‚Äì(min,max,mu,std), *LogUni-LU(min,start,max)
#      Ssmp         : supersampling - x{factor} e.g. x30 to create 30 subexposures per point
#      ClipOutliers : c{column_no}:W{window_width}C{clip_sigma}n{niter} e.g. c1:W11C5n1. column_no='a' to clip in all valid columns
#      scl_col      : scale data columns ‚Äì ['med_sub','rs0to1','rs-1to1','None']
#      spline       : c{column_no}:d{degree}K{knot_spacing} e.g. c0:d3K2 
#      ***********************************************************************************************************
# -----------------------------------------------------------------------------------------------------------------------
	LC_filepath: /Users/tunde/Library/CloudStorage/OneDrive-unige.ch/postdoc_work/conan3_tutorial/WASP-127/WASP-127_RV/
	RV_filepath: ../data/
	n_planet: 1
# -----------------------------------------PHOTOMETRY--------------------------------------------------------------------
	LC_auto_decorr: False   | delta_BIC: -5  # automatically determine baseline function for LCs with delta_BIC=-5
	exclude_cols:   []                         # list of column numbers (e.g. [3,4]) to exclude from decorrelation.
	enforce_pars:   []                         # list of decorr params (e.g. [B3, A5]) to enforce in decorrelation
# ============ Input lightcurves, filters baseline function =======================================================
	name flt ùúÜ_ùúám |Ssmp ClipOutliers scl_col |off col0 col3 col4 col5 col6 col7 col8|sin id GP spline         
# ============ Sinusoidal signals: Amp*trig(2ùúã/P*(x-x0)) - trig=sin or cos or both added==========================
	name/filt trig     n_harmonics  x     Amp[ppm]            P                   x0                
# ============ Photometry GP properties ===========================================================================
	name par1 kern1 Amplitude1_ppm     length_scale      |op| par2 kern2 Amplitude2_ppm     length_scale2    
# -----------------------------------------RADIAL VELOCITY---------------------------------------------------------------
	RV_auto_decorr: False   | delta_BIC: -5  # automatically determine baseline function for the RVs
	exclude_cols:   []                         # list of column numbers (e.g. [3,4]) to exclude from decorrelation.
	enforce_pars:   []                         # list of decorr params (e.g. [B3, A5]) to enforce in decorrelation
# ============ Input RV curves, baseline function, GP, spline,  gamma ============================================ 
	name    RVunit scl_col |col0 col3 col4 col5| sin GP spline_config   | gamma_km/s     
	rv1.dat km/s   med_sub |   2    0    0    0|   0 n  None            | N(-9.233510019201367,0.1)
	rv2.dat km/s   med_sub |   0    0    0    0|   0 n  None            | N(-9.210554832955161,0.1)
# ============ RV GP properties ================================================================================== 
	name    par1 kern1 Amplitude1         length_scale      |op| par2 kern2 Amplitude2         length_scale2  
# -----------------------------------------------------------------------------------------------------------------------
# ============ Planet parameters (Transit and RV) setup ========================================================== 
	name                	fit 	prior                              	note
	[rho_star]/Duration 	n   	F(0)                               	#choice in []|unit(gcm^-3/days)
	--------repeat this line & params below for multisystem, adding '_planet_number' to the names e.g RpRs_1 for planet 1, ...
	RpRs                	n   	F(0)                               	#range[-0.5,0.5]
	Impact_para         	n   	F(0)                               	#range[0,2]
	T_0                 	n   	F(6776.621239999775)               	#unit(days)
	Period              	n   	F(4.17806203)                      	#range[0,inf]days
	Eccentricity        	n   	F(0)                               	#range[0,1]
	omega               	n   	F(90)                              	#range[0,360]deg
	K                   	y   	U(0,0.01,0.1)                      	#unit(same as RVdata)
# ============ Limb darkening setup ============================================================================= 
	filters	fit	q1               	q2               
# ============ ddF setup ========================================================================================
	Fit_ddFs	dRpRs           	div_white
	n       	U(-0.5,0,0.5)   	n  
# ============ TTV setup ========================================================================================
	Fit_TTVs	dt_priors(deviation from linear T0)	transit_baseline[P]	per_LC_T0 	include_partial
	n       	U(-0.125,0,0.125)                  	             0.2500	False     	True
# ============ Phase curve setup ================================================================================ 
	filt  D_occ[ppm]           Fn[ppm]              ph_off[deg]          A_ev[ppm]            A_db[ppm]           
# ============ Custom LC function (read from custom_LCfunc.py file)================================================
	function        : None                                    	#custom function/class to combine with/replace LCmodel
	x               : None                                    	#independent variable [time, phase_angle]
	func_pars       : None                                    	#param names&priors e.g. A:U(0,1,2),P:N(2,1)
	extra_args      : None                                    	#extra args to func as a dict e.g ld_law:quad
	op_func         : None                                    	#function to combine the LC and custom models
	replace_LCmodel : False                                   	#if the custom function replaces the LC model
# ============ Custom RV function (read from custom_RVfunc.py file)================================================
	function        : None                                    	#custom function/class to combine with/replace RVmodel
	x               : None                                    	#independent variable [time, true_anomaly]
	func_pars       : None                                    	#param names&priors e.g. A:U(0,1,2),P:N(2,1)
	extra_args      : None                                    	#extra args to func as a dict
	op_func         : None                                    	#function to combine the RV and custom models
	replace_RVmodel : False                                   	#if the custom function replaces the RV model
# -----------------------------------------------------------------------------------------------------------------------
# ============ contamination setup (give contamination as flux ratio) ======================================== 
	filters	contam_factor
# ============ Stellar input properties ======================================================================
	# parameter     value 
	Radius_[Rsun]  N(1,None)
	Mass_[Msun]    N(0.95,0.02)
	Input_method:[R+rho(Rrho), M+rho(Mrho)]: Mrho
# -----------------------------------------------------------------------------------------------------------------------
# ============ FIT setup =====================================================================================
	Number_steps                              2000 
	Number_chains                             64 
	Number_of_processes                       10 
	Burnin_length                             500 
	n_live                                    100 
	force_nlive                               False 
	d_logz                                    0.1 
	Sampler(emcee/dynesty)                    dynesty 
	emcee_move(stretch/demc/snooker)          stretch 
	nested_sampling(static/dynamic[pfrac])    static 
	leastsq_for_basepar(y/n)                  n 
	apply_LCjitter(y/n,list)                  y 
	apply_RVjitter(y/n,list)                  y 
	LCjitter_loglims(auto/[lo,hi])            auto 
	RVjitter_lims(auto/[lo,hi])               auto 
	LCbasecoeff_lims(auto/[lo,hi])            auto 
	RVbasecoeff_lims(auto/[lo,hi])            auto 
	Light_Travel_Time_correction(y/n)         n
